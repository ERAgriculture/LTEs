)
# Step 3: Convert the practice list to a combination matrix and create the UpSet plot
upset_plot_prac<- upset(
fromList(solo_practice_list),
order.by = "freq",
nsets = length(solo_practice_list), # Use all solo practices as set size bars
nintersects = 11, # Show all intersections
keep.order = FALSE, # Maintain the order of sets as they appear in set_list
sets = names(solo_practice_list), # All solo practices have set size bars
mainbar.y.label = "Number of LTEs",
sets.x.label = "Total LTEs by Practice",
point.size = 3.5,
line.size = 2,
text.scale = c(1.3, 1.3, 1, 1, 2, 3)
)
# Plot the UpSet graph
print(upset_plot_prac)
#ggsave("upset.png", upset_plot, width = 15, height = 10, dpi = 500)
combined_summary <- site_data %>%
dplyr::select(LTE.ID, Country) %>%
distinct() %>%
left_join(
bind_rows(
filtered_Tables$Rot.Out %>% mutate(Practice = "Rotation") %>% dplyr::select(LTE.ID, Practice),
filtered_Tables$Int.Out %>% mutate(Practice = "Intercropping") %>% dplyr::select(LTE.ID, Practice),
filtered_Tables$Irrig.Method %>% mutate(Practice = "Irrigation") %>% dplyr::select(LTE.ID, Practice),
filtered_Tables$Till.Out %>% mutate(Practice = "Tillage") %>% dplyr::select(LTE.ID, Practice),
filtered_Tables$Res.Method %>% mutate(Practice = "Mulch") %>% dplyr::select(LTE.ID, Practice),
filtered_Tables$AF.Out %>% mutate(Practice = "Agroforestry") %>% dplyr::select(LTE.ID, Practice),
filtered_Tables$Var.Out %>% filter(grepl("Improved", V.Crop.Practice) & grepl("Unimproved", V.Crop.Practice)) %>% mutate(Practice = "Improved and Unimproved Varieties") %>% dplyr::select(LTE.ID, Practice),
filtered_Tables$Var.Out %>% filter(grepl("Improved", V.Crop.Practice)) %>% mutate(Practice = "Improved Varieties") %>% dplyr::select(LTE.ID, Practice),
filtered_Tables$Var.Out %>% filter(grepl("Unimproved", V.Crop.Practice)) %>% mutate(Practice = "Unimproved Varieties") %>% dplyr::select(LTE.ID, Practice),
filtered_Tables$Fert.Method %>% filter(grepl("Inorganic", F.Category)) %>% mutate(Practice = "Inorganic Fertilizer") %>% dplyr::select(LTE.ID, Practice),
filtered_Tables$Fert.Method %>% filter(!grepl("Inorganic|MicroNutrient|Unspecified", F.Category)) %>% mutate(Practice = "Organic Fertilizers") %>% dplyr::select(LTE.ID, Practice)
),
by = "LTE.ID"
)
summary_by_country_practice <- combined_summary %>%
group_by(Country, Practice) %>%
summarise(N_LTEs = n_distinct(LTE.ID)) %>%
ungroup()
DT::datatable(
summary_by_country_practice,
options = list(
scrollY = "400px",  # Set vertical scroll height
pageLength = 20     # Initial number of rows displayed
)
)
load("C:/Users/mlolita/OneDrive - CGIAR/ERA/ERA/Data/Large Files/POWER.CHIRPS.RData")
# Step 1: Filter out aggregated sites
filtered_sites <- filtered_Tables$Site.Out %>%
filter(!grepl("\\.\\.", Site.ID)) %>%  # Exclude rows where Site.ID contains '..'
mutate(
Site.LatD = as.numeric(Site.LatD),  # Ensure numeric latitude
Site.LonD = as.numeric(Site.LonD),  # Ensure numeric longitude
LatLon = paste0(round(Site.LatD, 4), ";", round(Site.LonD, 4))  # Create LatLon key
) %>%
select( LatLon, Country, Site.ID) %>%
distinct()
# Step 2: Prepare precipitation and temperature data
climate_summary <- POWER.CHIRPS %>%
mutate(
Latitude = as.numeric(Latitude),  # Ensure numeric latitude
Longitude = as.numeric(Longitude),  # Ensure numeric longitude
LatLon = paste0(round(Latitude, 4), ";", round(Longitude, 4))  # Create LatLon key
) %>%
group_by(LatLon, Year) %>%
summarise(
total_precip = sum(Rain, na.rm = TRUE),  # Sum precipitation
mean_temp = mean(Temp.Mean, na.rm = TRUE),  # Calculate mean temperature
.groups = 'drop'
)
historical_means <- climate_summary %>%
group_by(LatLon) %>%
summarise(
historical_precip = mean(total_precip, na.rm = TRUE),
sd_precip = sd(total_precip, na.rm = TRUE),
historical_temp = mean(mean_temp, na.rm = TRUE),
sd_temp = sd(mean_temp, na.rm = TRUE),
.groups = "drop"
)
# Step 4: Merge site and climate data
filtered_climate_data <- filtered_sites %>%
inner_join(climate_summary, by = "LatLon") %>%
inner_join(historical_means, by = "LatLon") %>%
mutate(Site = paste(Country, ",", Site.ID, ",", LatLon)) %>%
mutate(
is_hazard_precip = abs(total_precip - historical_precip) > 2 * sd_precip,
is_hazard_temp = abs(mean_temp - historical_temp) > 2 * sd_temp
)%>%
distinct()
# Climate requirements data
climate_requirements <- list(
`Bambara Nut` = list(
min_rainfall = 600,
max_rainfall = 1200,
min_temp = 21,
max_temp = 35,
critical_stages = c("Pod Development")
),
Barley = list(
min_rainfall = 350,
max_rainfall = 800,
min_temp = 8,
max_temp = 20,
critical_stages = c("Tillering", "Flowering")
),
`Black Gram` = list(
min_rainfall = 400,
max_rainfall = 600,
min_temp = 22,
max_temp = 32,
critical_stages = c("Pod Formation")
),
Cassava = list(
min_rainfall = 500,
max_rainfall = 5000,
min_temp = 22,
max_temp = 33,
critical_stages = c("Early Growth", "Canopy Development")
),
Chickpea = list(
min_rainfall = 400,
max_rainfall = 800,
min_temp = 10,
max_temp = 24,
critical_stages = c("Flowering", "Pod Formation")
),
Cocoa = list(
min_rainfall = 1200,
max_rainfall = 3000,
min_temp = 21,
max_temp = 28,
critical_stages = c("Canopy Development")
),
`Common Bean` = list(
min_rainfall = 400,
max_rainfall = 500,
min_temp = 21,
max_temp = 26,
critical_stages = c("Flowering", "Pod Filling")
),
Cotton = list(
min_rainfall = 700,
max_rainfall = 1200,
min_temp = 25,
max_temp = 35,
critical_stages = c("Flowering", "Boll Formation")
),
Cowpea = list(
min_rainfall = 300,
max_rainfall = 500,
min_temp = 24,
max_temp = 31.5,
critical_stages = c("Emergence", "Pod Formation")
),
`Durum Wheat` = list(
min_rainfall = 350,
max_rainfall = 800,
min_temp = 10,
max_temp = 24,
critical_stages = c("Grain Filling")
),
`Ethiopian Mustard` = list(
min_rainfall = 400,
max_rainfall = 700,
min_temp = 15,
max_temp = 25,
critical_stages = c("Flowering", "Pod Formation")
),
`Finger Millet` = list(
min_rainfall = 400,
max_rainfall = 900,
min_temp = 22,
max_temp = 30,
critical_stages = c("Vegetative", "Grain Filling")
),
Grape = list(
min_rainfall = 600,
max_rainfall = 1200,
min_temp = 10,
max_temp = 30,
critical_stages = c("Fruit Setting", "Ripening")
),
Groundnut = list(
min_rainfall = 400,
max_rainfall = 1200,
min_temp = 24,
max_temp = 30,
critical_stages = c("Flowering", "Pod Development")
),
`Jute Mallow` = list(
min_rainfall = 500,
max_rainfall = 1000,
min_temp = 25,
max_temp = 35,
critical_stages = c("Leaf Development")
),
Lentil = list(
min_rainfall = 300,
max_rainfall = 500,
min_temp = 8,
max_temp = 22,
critical_stages = c("Flowering", "Pod Filling")
),
Maize = list(
min_rainfall = 500,
max_rainfall = 1200,
min_temp = 18,
max_temp = 32,
critical_stages = c("Flowering", "Grain Filling")
),
`Mung Bean` = list(
min_rainfall = 400,
max_rainfall = 600,
min_temp = 22,
max_temp = 30,
critical_stages = c("Pod Formation", "Maturity")
),
Okra = list(
min_rainfall = 500,
max_rainfall = 1000,
min_temp = 20,
max_temp = 30,
critical_stages = c("Fruit Development")
),
`Peach & Nectarine` = list(
min_rainfall = 500,
max_rainfall = 800,
min_temp = 15,
max_temp = 25,
critical_stages = c("Fruit Setting")
),
`Pearl Millet` = list(
min_rainfall = 400,
max_rainfall = 700,
min_temp = 25,
max_temp = 30,
critical_stages = c("Early Growth", "Grain Filling")
),
`Pigeon Pea` = list(
min_rainfall = 500,
max_rainfall = 1000,
min_temp = 22,
max_temp = 26,
critical_stages = c("Flowering", "Grain Filling")
),
Rice = list(
min_rainfall = 800,
max_rainfall = 1500,
min_temp = 24,
max_temp = 30,
critical_stages = c("Tillering", "Flowering")
),
Sorghum = list(
min_rainfall = 400,
max_rainfall = 900,
min_temp = 23,
max_temp = 31,
critical_stages = c("Reproductive Stage", "Flowering")
),
Soybean = list(
min_rainfall = 350,
max_rainfall = 1100,
min_temp = 18,
max_temp = 29,
critical_stages = c("Mid-Season", "Pod Filling")
),
Sunflower = list(
min_rainfall = 500,
max_rainfall = 800,
min_temp = 20,
max_temp = 28,
critical_stages = c("Flowering")
),
`Sweet Potato` = list(
min_rainfall = 800,
max_rainfall = 1200,
min_temp = 20,
max_temp = 30,
critical_stages = c("Tuber Formation")
),
Teff = list(
min_rainfall = 500,
max_rainfall = 1000,
min_temp = 15,
max_temp = 27,
critical_stages = c("Vegetative Growth")
),
Wheat = list(
min_rainfall = 450,
max_rainfall = 1000,
min_temp = 10,
max_temp = 24,
critical_stages = c("Flowering", "Grain Filling")
),
`Wheat-Barley` = list(
min_rainfall = 400,
max_rainfall = 900,
min_temp = 8,
max_temp = 24,
critical_stages = c("Flowering")
),
Yam = list(
min_rainfall = 1000,
max_rainfall = 1500,
min_temp = 25,
max_temp = 32,
critical_stages = c("Tuber Growth")
)
)
climate_requirements_df <- do.call(rbind, lapply(names(climate_requirements), function(crop) {
data <- climate_requirements[[crop]]
data.frame(
Crop = crop,
Min_Rainfall = data$min_rainfall,
Max_Rainfall = data$max_rainfall,
Min_Temperature = data$min_temp,
Max_Temperature = data$max_temp,
Critical_Stages = paste(data$critical_stages, collapse = ", ")
)
}))
yield_data <- filtered_Tables$Data.Out %>%
filter(Out.Subind == "Crop Yield") %>%
dplyr::select(Time, Site.ID, Site.LatD, Site.LonD, P.Product, Out.Subind, Out.Code.Joined, ED.Mean.T, ED.Error) %>%
mutate(
Site.LatD = as.numeric(Site.LatD),  # Ensure numeric latitude
Site.LonD = as.numeric(Site.LonD),  # Ensure numeric longitude
LatLon = paste0(round(Site.LatD, 4), ";", round(Site.LonD, 4))  # Create LatLon key
)
# Unit conversions
unit_conversions <- list(
"Crop Yield..t/ha" = 1,
"Crop Yield..Mg/ha" = 1,
"Crop Yield..kg/ha" = 0.001,
"Crop Yield..q/ha" = 0.1,
"Crop Yield..t/ha/yr" = 1,
"Crop Yield..Mg/ha/yr" = 1,
"Crop Yield..t/ha DM" = 1,
"Crop Yield..Mg DM/ha" = 1,
"Crop Yield..kg DM/ha" = 0.001,
"Crop Yield..t/ha..fresh" = 1,
"Crop Yield..Mg/ha..dry matter" = 1
)
yield_data_processed <- yield_data %>%
mutate(
Conversion_Factor = sapply(
Out.Code.Joined,
function(unit) if (unit %in% names(unit_conversions)) unit_conversions[[unit]] else NA
),
ED.Mean.T = ED.Mean.T * Conversion_Factor,  # Apply conversion
Out.Code.Joined = gsub("\\..*?$", "", Out.Code.Joined)  # Remove unit descriptors
) %>%
filter(!is.na(Conversion_Factor))  # Keep rows with valid conversions
yield_data_processed <- yield_data_processed %>%
filter(!grepl("\\.\\.", Time)) %>%  # Exclude invalid years
filter(!grepl("/", Time)) %>%  # Exclude rows with '/' in product names
mutate(
Year = floor(as.numeric(Time)),  # Extract base year
Season = as.numeric(gsub(".*\\.", "", Time)),  # Extract season (if applicable)
Weighted_Mean = ED.Mean.T,  # Mean yield
Error = ED.Error  # Error
) %>%
group_by(P.Product, Site.ID, Year, LatLon) %>%  # Group by LatLon to preserve it
summarise(
Mean_Yield = sum(Weighted_Mean, na.rm = TRUE),  # Sum seasonal data
Mean_Error = sqrt(sum(Error^2, na.rm = TRUE)),  # Combine errors
.groups = "drop"
)
library(shiny)
library(dplyr)
library(ggplot2)
# UI
ii <- fluidPage(
sidebarLayout(
sidebarPanel(
selectizeInput("site_id", "Select Site:", choices = NULL),
selectInput("variable", "Select Variable:", choices = c("Precipitation" = "total_precip", "Temperature" = "mean_temp")),
selectInput("crop", "Select Crop (Optional):", choices = NULL),
checkboxInput("show_yields", "Show Yield Data", value = FALSE), # Checkbox to show yield data
tags$hr(), # Separator line
tags$p(
"Plot Legend:",
tags$ul(
tags$li(tags$b("Black dashed line:"), " Historical mean."),
tags$li(tags$b("Red dashed line:"), " Crop requirements."),
tags$li(tags$b("Grey bars:"), " Normal years."),
tags$li(tags$b("Red bars:"), " Abnormal climate years.")
)
)
),
mainPanel(
plotOutput("climatePlot"),
conditionalPanel(
condition = "input.show_yields == true",
plotOutput("yieldPlot")
),
tableOutput("climateSummary")
)
)
)
# Server
server <- function(input, output, session) {
# Populate site and crop choices
observe({
updateSelectizeInput(session, "site_id", choices = unique(filtered_climate_data$Site), server = TRUE)
updateSelectInput(session, "crop", choices = c("", unique(climate_requirements_df$Crop)))
})
# Reactive filtered climate data
filtered_data <- reactive({
req(input$site_id)
filtered <- filtered_climate_data %>%
filter(Site == input$site_id) %>%
mutate(
hazard = if (input$variable == "total_precip") is_hazard_precip else is_hazard_temp,
bar_color = ifelse(hazard, "red", "lightgrey")
)
filtered
})
# Reactive crop requirements
crop_requirements <- reactive({
if (input$crop == "") return(NULL)
crop_req <- climate_requirements_df %>% filter(Crop == input$crop)
crop_req
})
# Reactive historical mean
site_historical_mean <- reactive({
filtered_data() %>%
summarise(mean_value = if (input$variable == "total_precip") historical_precip[1] else historical_temp[1]) %>%
pull(mean_value)
})
# Reactive yield data
yield_data_filtered <- reactive({
req(input$site_id, input$crop)
yield_data_processed %>%
filter(
LatLon %in% unique(filtered_data()$LatLon),  # Match location
P.Product == input$crop                    # Match crop
) %>%
arrange(Year)
})
# Plot output for climate data
output$climatePlot <- renderPlot({
crop_req <- crop_requirements()
filtered_climate <- filtered_data()
if (is.null(filtered_climate) || nrow(filtered_climate) == 0) {
return(ggplot() + labs(title = "No Data Available"))
}
climate_plot <- ggplot(filtered_climate, aes(x = Year, y = get(input$variable), fill = bar_color)) +
geom_bar(stat = "identity", show.legend = FALSE) +
scale_fill_identity() +
geom_hline(
yintercept = site_historical_mean(),
color = "black",
linetype = "dashed",
size = 1
) +
labs(
title = paste("Annual", input$variable, "for Site:", input$site_id),
subtitle = ifelse(input$crop == "", "No Crop Selected", paste("Crop:", input$crop)),
x = "Year",
y = ifelse(input$variable == "total_precip", "Total Precipitation (mm)", "Mean Temperature (°C)")
) +
theme_minimal()
if (!is.null(crop_req)) {
climate_plot <- climate_plot +
geom_hline(
yintercept = ifelse(input$variable == "total_precip", crop_req$Min_Rainfall, crop_req$Min_Temperature),
color = "red",
linetype = "dashed",
size = 1
) +
geom_hline(
yintercept = ifelse(input$variable == "total_precip", crop_req$Max_Rainfall, crop_req$Max_Temperature),
color = "red",
linetype = "dashed",
size = 1
)
}
climate_plot
})
# Plot output for yield data
output$yieldPlot <- renderPlot({
yield_filtered <- yield_data_filtered()
if (is.null(yield_filtered) || nrow(yield_filtered) == 0) {
return(ggplot() + labs(title = "No Yield Data Available"))
}
ggplot(yield_filtered, aes(x = Year, y = Mean_Yield)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
geom_errorbar(aes(ymin = Mean_Yield - Mean_Error, ymax = Mean_Yield + Mean_Error), width = 0.2) +
labs(
title = paste("Annual Yield for Crop:", input$crop),
x = "Year",
y = "Yield (t/ha)"
) +
theme_minimal()
})
# Table output for climate summary
output$climateSummary <- renderTable({
filtered_data() %>%
select(Year, total_precip, mean_temp, hazard) %>%
rename(
"Year" = Year,
"Total Precipitation (mm)" = total_precip,
"Mean Temperature (°C)" = mean_temp,
"Abnormal climate" = hazard
)
})
}
# Run the app
shinyApp(ui = ii, server = server)
